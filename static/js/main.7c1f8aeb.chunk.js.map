{"version":3,"sources":["functions/apiFunctions.js","reportWebVitals.js","logo.svg","widgets/MovieRatingBar.js","widgets/BookingButton.js","widgets/MovieListItem.js","widgets/MovieList.js","pages/ComparePage.js","widgets/MovieGridItem.js","widgets/MovieGrid.js","pages/DiscoveryPage.js","pages/MainPage.js","index.js"],"names":["apiImageData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","fetch","require","settings","Method","APIKey","jsonResponse","url","a","res","json","apiFunctions","getDiscoverMoviesResponse","filters","page","Object","entries","key","value","undefined","response","status_code","console","log","status_message","getImageUrl","apiURL","sizeKey","sizeIndex","images","base","secure_base_url","size","getPeople","query","split","join","results","MovieRatingBar","indicator","this","props","score","class","Rating","name","max","precision","disabled","React","Component","BookingButton","modifiedTitle","title","link","Button","onClick","e","preventDefault","window","location","href","variant","_styles","root","display","flexDirection","media","width","height","paddingLeft","paddingTop","MovieListItem","state","imageUrl","movie","poster_path","setState","movieData","cardMedia","CardMedia","style","image","Container","CircularProgress","fullDate","hasDate","year","titleWithYear","overview","ratingBar","vote_average","Typography","Grid","item","xs","Card","CardContent","MovieList","selfUpdating","buttonPress","loading","pageList","currentPage","totalPages","moviesResponse","pageNo","lowerBound","Math","floor","upperBound","ceil","pageNavChildren","updatePage","i","typography","event","color","push","container","shouldUpdate","listItems","length","pageNav","PageNav","Fragment","spacing","apiSortOptions","language","sort_by","include_adult","true","false","ComparePage","movies","peopleSuggestionsLoading","peopleSuggestions","shouldUpdateMovieList","newValue","updatedFilters","selects","options","MenuItem","subKey","subValue","FormControl","InputLabel","Select","minWidth","onChange","handleSelectChange","target","newPeople","updateMovies","getSortSelects","Autocomplete","multiple","clearOnEscape","idArr","map","person","id","getOptionLabel","option","renderOption","renderInput","params","TextField","label","updatePeopleSuggestions","inputProps","MovieGridItem","cardStyles","cardImage","raised","MovieGrid","gridChildren","forLoopMax","min","maxItems","direction","alignItems","justify","DiscoveryPage","stickToTop","position","top","padTopBottom","paddingBottom","stickToBottom","bottom","logoFlushRight","right","MainPage","navValue","pages","AppBar","Toolbar","src","logo","alt","BottomNavigation","showLabels","setValue","BottomNavigationAction","icon","Star","Compare","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c1f8aeb.chunk.js","sourcesContent":["//using Node-Fetch to communicate with API\r\nconst fetch = require('node-fetch');\r\nconst settings = {Method: 'Get'};\r\n\r\n//currently using The Movie Database API. (https://api.themoviedb.org/3)\r\nconst APIKey = '307d0553d18db7cd4c918ffe1d939bf5';\r\nconst moviesPerPage = 20;\r\n\r\n//draw the base URL and sizes once\r\nvar apiImageData;\r\n\r\n//get JSON from HTTPS URL\r\nasync function jsonResponse(url) {\r\n\tlet res = await fetch(url, settings);\r\n\treturn res.json();\r\n}\r\n\r\nlet apiFunctions = function () {};\r\n\r\n//get a list of movies, with optional sorting and filtering parameters\r\napiFunctions.getDiscoverMoviesResponse = async (filters = {}, page = 1) => {\r\n\tvar url = `https://api.themoviedb.org/3/discover/movie?api_key=${APIKey}&page=${page}`;\r\n\r\n\tfor (const [key, value] of Object.entries(filters)) {\r\n\t\turl += `&${key}=${value}`;\r\n\t}\r\n\r\n\tlet response = await jsonResponse(url);\r\n\r\n\t//return results if no error is found\r\n\tif (response.status_code === undefined) {\r\n\t\treturn response;\r\n\t}\r\n\telse {\r\n\t\t//print out error message\r\n\t\tconsole.log(response.status_message);\r\n\t}\r\n\r\n\r\n\t//return an empty array if an error is encountered\r\n\treturn [];\r\n\t\r\n}\r\n\r\n//get image URL from API Configurations\r\napiFunctions.getImageUrl = async (apiURL, sizeKey = 'poster_sizes', sizeIndex = 3) => {\r\n\tif (apiURL === undefined) return undefined;\r\n\r\n\tif (apiImageData === undefined) {\r\n\t\tvar url = `https://api.themoviedb.org/3/configuration?api_key=${APIKey}`;\r\n\t\tlet response = await jsonResponse(url);\r\n\t\tif (response.status_code === undefined) apiImageData = response.images;\r\n\t}\r\n\r\n\t//if error persists, return undefined\r\n\tif (apiImageData === undefined) return undefined;\r\n\r\n\t//set base URL\r\n\tlet base = apiImageData.secure_base_url;\r\n\t//by default, size currently set to \r\n\tlet size = apiImageData[sizeKey][sizeIndex];\r\n\r\n\t//return full image URL\r\n\treturn base + size + apiURL;\r\n\t\r\n};\r\n\r\n//get list of actors/actresses based on query\r\napiFunctions.getPeople = async (query) => {\r\n\t//swap out spaces in query for GET spaces\r\n\tlet modified_query = query.split(' ').join('%20');\r\n\r\n\tlet url = `https://api.themoviedb.org/3/search/person?api_key=${APIKey}&query=${query}`;\r\n\r\n\tlet response = await jsonResponse(url);\r\n\r\n\t//has results\r\n\tif (response.status_code === undefined) {\r\n\t\treturn response.results || [];\r\n\t}\r\n\r\n\t//no results found, returning empty array\r\n\treturn [];\r\n}\r\nexport default apiFunctions;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/logo.caee7457.svg\";","import React from 'react';\r\nimport { Rating } from \"@material-ui/lab\";\r\n\r\n\r\n//rating bar for movies (score out of 10)\r\n//requires prop 'score' (vote_average from API)\r\nclass MovieRatingBar extends React.Component {\r\n\trender() {\r\n\t\tlet indicator = `(${this.props.score}/10)`;\r\n\r\n\t\treturn (\r\n\t\t\t<div class='horizontally-aligned-div'>\r\n\t\t\t\t<Rating name={`${this.props.score}`} max={10} precision={0.1} size='small' disabled={true} value={this.props.score} />\r\n\t\t\t\t<p class='indicator'>{indicator}</p>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default MovieRatingBar;","import { Button, Link } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\n//requires prop 'title'\r\nclass BookingButton extends React.Component {\r\n    render() {\r\n        let modifiedTitle = this.props.title.split(' ').join('%20') + ' showtimes';\r\n        let link = `https://www.google.com/search?q=${modifiedTitle}`;\r\n        //sends user to Google (booking not implemented)\r\n        return (\r\n            <Button\r\n                onClick={(e) => {\r\n                    e.preventDefault();\r\n                    window.location.href = link;\r\n                }}\r\n                variant='primary'\r\n            >\r\n                Book Now\r\n            </Button>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default BookingButton;","import { CircularProgress, Grid, Typography, Card, CardContent, CardMedia, Container } from '@material-ui/core';\r\nimport React from 'react';\r\nimport apiFunctions from '../functions/apiFunctions';\r\nimport MovieRatingBar from './MovieRatingBar';\r\nimport BookingButton from './BookingButton';\r\n\r\nconst _styles = {\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n    },\r\n    media: {\r\n        width: '0',\r\n        height: '0',\r\n        paddingLeft: '34.5%', //using an aspect ratio of 0.69 (movie posters range from 0.69 to 0.699)\r\n        paddingTop: '50%'\r\n    },\r\n};\r\n\r\nconst noOverviewMessage = 'There is no synopsis for this movie yet.';\r\nconst noRatingsMessage = 'There are no ratings for this movie yet.';\r\n\r\nclass MovieListItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            imageUrl: undefined,\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.setState({\r\n            imageUrl: await apiFunctions.getImageUrl(this.props.movie.poster_path),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let movieData = this.props.movie;\r\n        let cardMedia = this.state.imageUrl !== undefined\r\n        ? <CardMedia \r\n            style={_styles.media}\r\n            image={this.state.imageUrl}\r\n        />\r\n        : <Container>\r\n            <CircularProgress />\r\n        </Container>;\r\n\r\n        //title null handling\r\n        let fullDate = movieData['release_date'];\r\n        let hasDate = fullDate !== undefined;\r\n        let year = hasDate ? fullDate.split('-')[0] : undefined; //date is in format 'yyyy-mm-dd'\r\n        let titleWithYear = hasDate ? `${movieData.title} (${year})` : movieData.title;\r\n\r\n        //overview null handling\r\n        let overview = movieData.overview === undefined || movieData.overview == '' ? noOverviewMessage : movieData.overview;\r\n        //rating null handling\r\n        let ratingBar = movieData.vote_average > 0 \r\n        ? <MovieRatingBar score={movieData.vote_average} /> \r\n        : <Typography><em>{noRatingsMessage}</em></Typography>;\r\n\r\n        return (\r\n            <Grid\r\n                item\r\n                xs={12}\r\n            >\r\n                <Card\r\n                    style={_styles.root}\r\n                >\r\n                    {cardMedia}\r\n                    <CardContent>\r\n                        <Typography variant='h5'>\r\n                            {titleWithYear}\r\n                        </Typography>\r\n                        {ratingBar}\r\n                        <Typography>\r\n                            {overview}\r\n                        </Typography>\r\n                        <BookingButton title={movieData.title} />\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MovieListItem;","import { Grid, Button, CircularProgress } from '@material-ui/core';\r\nimport React from 'react';\r\nimport apiFunctions from '../functions/apiFunctions';\r\nimport MovieListItem from './MovieListItem';\r\n\r\nclass MovieList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.selfUpdating = false;\r\n        this.buttonPress = false;\r\n        this.state = {\r\n            loading: false,\r\n            pageList: [],\r\n            currentPage: 1,\r\n            totalPages: 1,\r\n        }\r\n    }\r\n\r\n    //update page number and page list\r\n    async updatePage(page) {\r\n        this.setState({loading: true, pageList: []});\r\n        let moviesResponse = await apiFunctions.getDiscoverMoviesResponse(this.props.filters, page);\r\n        this.setState({\r\n            loading: false,\r\n            pageList: moviesResponse.results,\r\n            totalPages: moviesResponse['total_pages'],\r\n            currentPage: page,\r\n        })\r\n\r\n        \r\n        if (this.buttonPress) this.buttonPress = false;\r\n    }\r\n\r\n    //page navigator\r\n    PageNav() {\r\n        let pageNo = this.state.currentPage;\r\n        //find lower and upper multiples of 10 that contain current page number\r\n        let lowerBound = Math.floor(pageNo / 10) * 10 + 1;\r\n        let upperBound = Math.ceil(pageNo / 10) * 10;\r\n        \r\n        //correction for when page number is a multiple of 10\r\n        if (pageNo % 10 == 0) {\r\n            lowerBound = pageNo - 9;\r\n            upperBound = pageNo;\r\n        }\r\n\r\n        if (upperBound > this.state.totalPages) upperBound = this.state.totalPages;\r\n        \r\n        //populate navbar children numbers\r\n        let pageNavChildren = [];\r\n\r\n        //navigate to page and refresh on click\r\n        let onClick = (page) => {\r\n            this.buttonPress = true;\r\n            this.updatePage(page);\r\n        };\r\n\r\n        for (let i = lowerBound; i <= upperBound; i++) {\r\n            let typography = i == pageNo\r\n            ? <Button onClick={(event) => onClick(i)} color='secondary'>{i}</Button> \r\n            : <Button onClick={(event) => onClick(i)}>{i}</Button>;\r\n\r\n            pageNavChildren.push(\r\n                <Grid\r\n                    item\r\n                    xs={1}\r\n                    key={i}\r\n                >\r\n                    {typography}\r\n                </Grid>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Grid\r\n                container\r\n            >\r\n                <Grid\r\n                    item\r\n                    xs={1}\r\n                >\r\n                    <Button onClick={(event) => onClick(pageNo - 1)}>{'<'}</Button>\r\n                </Grid>\r\n                {pageNavChildren}\r\n                <Grid\r\n                    item\r\n                    xs={1}\r\n                >\r\n                    <Button onClick={(event) => onClick(pageNo + 1)}>{'>'}</Button>\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.updatePage(1);\r\n    }\r\n\r\n    async componentDidUpdate() {\r\n        if (!this.selfUpdating && !this.buttonPress && this.props.shouldUpdate) {\r\n            console.log('update');\r\n            this.selfUpdating = true;\r\n            await this.updatePage(1);\r\n            this.selfUpdating = false;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let listItems = [];\r\n        if (this.state.pageList.length > 0) for (let movie of this.state.pageList) {\r\n            listItems.push(\r\n                <MovieListItem movie={movie} key={movie.title} />\r\n            );\r\n        }\r\n        else listItems.push(<CircularProgress />);\r\n\r\n        let pageNav = this.state.pageList.length > 0 ? this.PageNav() : undefined;\r\n        return (\r\n            <React.Fragment>\r\n                {pageNav}\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                >\r\n                    {listItems}\r\n                </Grid>\r\n                {pageNav}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MovieList;","import { FormControl, Grid, InputLabel, MenuItem, Select, Paper, Typography, TextField, ListItemIcon } from '@material-ui/core';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport React from 'react';\r\nimport apiFunctions from '../functions/apiFunctions';\r\nimport MovieList from '../widgets/MovieList';\r\n\r\n//full map of available sort options, and corresponding english meanings\r\nconst apiSortOptions = {\r\n    //not a full list, picked for proof of concept\r\n    language: {\r\n        'en-US': 'English (US)',\r\n        'en-GB': 'English (United Kingdom)',\r\n        'de-DE': 'German (Germany)',\r\n        'de-CH': 'German (Switzerland)',\r\n        'da-DK': 'Danish (Denmark)',\r\n        'cs-CZ': 'Czech (Czech Republic)',\r\n        'el-GR': 'Greek (Greece)',\r\n        'es-ES': 'Spanish (Spain)',\r\n        'fi-FI': 'Finnish (Finland)',\r\n        'fr-FR': 'French (France)',\r\n        'hi-IN': 'Hindi (India)',\r\n        'it-IT': 'Italian (Italy)',\r\n        'ja-JP': 'Japanese (Japan)',\r\n        'ko-KR': 'Korean (Korea)',\r\n        'ms-MY': 'Malay (Malaysia)',\r\n        'sv-SE': 'Swedish (Sweden)',\r\n        'ta-IN': 'Tamil (India)',\r\n        'th-TH': 'Thai (Thailand)',\r\n        'tl-PH': 'Tagalog (Philippines)',\r\n        'zh-CN': 'Chinese (Simplified)',\r\n        'zh-TW': 'Chinese (Traditional)',\r\n    },\r\n    //to sort results by (ascending, descending)\r\n    sort_by: {\r\n        'popularity.asc': 'Popularity (Ascending)',\r\n        'popularity.desc': 'Popularity (Descending)', \r\n        'release_date.asc': 'Release Date (Ascending)', \r\n        'release_date.desc': 'Release Date (Descending)', \r\n        'revenue.asc': 'Revenue (Ascending)', \r\n        'revenue.desc': 'Revenue (Descending)', \r\n        'primary_release_date.asc': 'Primary Release Date (Ascending)', \r\n        'primary_release_date.desc': 'Primary Release Date (Descending)', \r\n        'original_title.asc': 'Original Title (Ascending)', \r\n        'original_title.desc': 'Original Title (Descending)', \r\n        'vote_average.asc': 'Average Rating (Ascending)', \r\n        'vote_average.desc': 'Average Rating (Descending)', \r\n        'vote_count.asc': 'Vote Count (Ascending)', \r\n        'vote_count.desc': 'Vote Count (Descending)',\r\n    },\r\n    include_adult: {\r\n        true: 'True',\r\n        false: 'False',\r\n    },\r\n}\r\n\r\n\r\nclass ComparePage extends React.Component {\r\n    //filters should be set according to https://developers.themoviedb.org/3/discover/movie-discover\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n            movies: [],\r\n            peopleSuggestionsLoading: false,\r\n            peopleSuggestions: [],\r\n            filters: {},\r\n            shouldUpdateMovieList: false,\r\n        }\r\n    }\r\n\r\n    async updateMovies() {\r\n        this.setState({loading: true, shouldUpdateMovieList: false});\r\n        let movies = (await apiFunctions.getDiscoverMoviesResponse(this.state.filters)).results;\r\n\r\n        this.setState({\r\n            loading: false,\r\n            movies: movies,\r\n            shouldUpdateMovieList: false,\r\n        });\r\n    }\r\n\r\n    handleSelectChange(key, newValue) {\r\n        let updatedFilters = this.state.filters;\r\n        updatedFilters[key] = newValue;\r\n        this.setState({\r\n            filters: updatedFilters,\r\n            shouldUpdateMovieList: true,\r\n        });\r\n    }\r\n    //automatically generate selects for the grid\r\n    getSortSelects() {\r\n        let selects = [];\r\n        for (const [key, value] of Object.entries(apiSortOptions)) {\r\n            let options = [\r\n                <MenuItem\r\n                    key={0}\r\n                    value=''\r\n                >\r\n                    <em>None</em>\r\n                </MenuItem>\r\n            ];\r\n            \r\n            for (const [subKey, subValue] of Object.entries(value)) {\r\n                options.push(\r\n                    <MenuItem\r\n                        key={subKey}\r\n                        value={subKey}\r\n                    >\r\n                        {subValue}\r\n                    </MenuItem>\r\n                );\r\n            }\r\n            selects.push(\r\n                <Grid\r\n                    item\r\n                    key={key}\r\n                >\r\n                    <FormControl>\r\n                        <InputLabel>\r\n                            {key.split('_').join(' ')}\r\n                        </InputLabel>\r\n                            <Select\r\n                                style={{minWidth: '150px'}}\r\n                                value={this.state.filters[key] || ''}\r\n                                onChange={(event) => {\r\n                                    this.handleSelectChange(\r\n                                        key, event.target.value,\r\n                                    );\r\n                                }}\r\n                            >\r\n                                {options}\r\n                            </Select>\r\n                    </FormControl>\r\n                \r\n                </Grid>\r\n            )\r\n        }\r\n\r\n        return selects;\r\n    }\r\n\r\n    async updatePeopleSuggestions(query) {\r\n        this.setState({peopleSuggestionsLoading: true, shouldUpdateMovieList: false,});\r\n        let newPeople = await apiFunctions.getPeople(query);\r\n        this.setState({peopleSuggestions: newPeople, peopleSuggestionsLoading: false, shouldUpdateMovieList: false,});\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.updateMovies();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Typography variant='h4'>\r\n                    Find your ideal movie\r\n                </Typography>\r\n                <Grid\r\n                    container\r\n                    spacing={1}\r\n                >\r\n                    {this.getSortSelects()}\r\n                    <Grid\r\n                        item\r\n                    >\r\n                        <Autocomplete\r\n                            multiple\r\n                            clearOnEscape\r\n                            loading={this.state.peopleSuggestionsLoading}\r\n                            style={{minWidth: '300px'}}\r\n                            onChange={(event, value) => {\r\n                                //only grab the IDs for use with API\r\n                                let idArr = value.map((person) => person.id);\r\n                                let updatedFilters = this.state.filters;\r\n                                updatedFilters['with_people'] = idArr.join(',');\r\n                                this.setState({\r\n                                    filters: updatedFilters,\r\n                                    shouldUpdateMovieList: true,\r\n                                });\r\n                            }}\r\n                            options={this.state.peopleSuggestions}\r\n                            getOptionLabel={(option) => option.name}\r\n                            renderOption={(option) => (\r\n                                option.name\r\n                            )}\r\n                            renderInput={(params) => (\r\n                                <TextField \r\n                                    {...params}\r\n                                    label='Search for actors...'\r\n                                    variant='outlined'\r\n                                    onChange={(event) => {\r\n                                        let value = event.target.value;\r\n                                        this.updatePeopleSuggestions(value);\r\n                                    }}\r\n                                    inputProps={{\r\n                                        ...params.inputProps,\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <MovieList filters={this.state.filters} shouldUpdate={this.state.shouldUpdateMovieList}/>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ComparePage;","import React from 'react';\r\nimport { Card, CardContent, CardMedia, CircularProgress, Grid, Typography } from \"@material-ui/core\";\r\nimport apiFunctions from \"../functions/apiFunctions\";\r\nimport MovieRatingBar from './MovieRatingBar';\r\nimport BookingButton from './BookingButton';\r\n\r\nconst noOverviewMessage = 'There is no synopsis for this movie yet.';\r\nconst noRatingsMessage = 'There are no ratings for this movie yet.';\r\n\r\nclass MovieGridItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            imageUrl: undefined\r\n        };    \r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.setState(\r\n            {\r\n                imageUrl: await apiFunctions.getImageUrl(this.props.movie.poster_path),\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const cardStyles = {\r\n            root: {minWidth: '140px'}, //half the width of smallest phone width\r\n            media: {\r\n                height: '0',\r\n                paddingTop: '144.93%' //using an aspect ratio of 0.69 (movie posters range from 0.69 to 0.699)\r\n            },\r\n        };\r\n\r\n        let movieData = this.props.movie;\r\n        let cardImage = this.state.imageUrl !== undefined\r\n            ? <CardMedia \r\n                style={cardStyles.media}\r\n                image={this.state.imageUrl}\r\n            />\r\n            : <CircularProgress />;\r\n        \r\n        //title null handling\r\n        let fullDate = movieData['release_date'];\r\n        let hasDate = fullDate !== undefined;\r\n        let year = hasDate ? fullDate.split('-')[0] : undefined; //date is in format 'yyyy-mm-dd'\r\n        let titleWithYear = hasDate ? `${movieData.title} (${year})` : movieData.title;\r\n\r\n        //overview null handling\r\n        let overview = movieData.overview || noOverviewMessage;\r\n\r\n        //rating null handling\r\n        let ratingBar = movieData.vote_average > 0 \r\n        ? <MovieRatingBar score={movieData.vote_average} /> \r\n        : <Typography><em>{noRatingsMessage}</em></Typography>;\r\n\r\n        return (\r\n            <Grid\r\n                item\r\n                xs={6}\r\n            >\r\n                <Card \r\n                    raised\r\n                    style={cardStyles.root}\r\n                >\r\n                    {cardImage}\r\n                    <CardContent>\r\n                        <Typography variant='h5'>\r\n                            {titleWithYear}\r\n                        </Typography>\r\n                        {ratingBar}\r\n                        <Typography>\r\n                            {overview}\r\n                        </Typography>\r\n                        <BookingButton title={movieData.title} />\r\n                    </CardContent>    \r\n                </Card>    \r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MovieGridItem;","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport apiFunctions from \"../functions/apiFunctions\";\r\nimport MovieGridItem from \"./MovieGridItem\";\r\n\r\nclass MovieGrid extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            movies: [],\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let movieData = (await apiFunctions.getDiscoverMoviesResponse()).results;\r\n        this.setState({movies: movieData});\r\n    }\r\n\r\n    render() {\r\n        let gridChildren = [];\r\n        let forLoopMax = Math.min(this.state.movies.length, this.props.maxItems);\r\n        for (let i = 0; i < forLoopMax; i++) {\r\n            gridChildren.push(<MovieGridItem movie={this.state.movies[i]} key={i}/>);\r\n        }\r\n        return (\r\n            <Grid\r\n                container\r\n                spacing={2}\r\n                direction='row'\r\n                alignItems='flex-start'\r\n                justify='center'\r\n            >\r\n                {gridChildren}\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MovieGrid;","import { Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport MovieGrid from '../widgets/MovieGrid';\r\n\r\nexport default function DiscoveryPage() {\r\n    return (\r\n        <React.Fragment>\r\n            <Typography variant='h2'>\r\n                Trending Right Now\r\n            </Typography>\r\n            <MovieGrid maxItems={10} />\r\n        </React.Fragment>\r\n    );\r\n}","import { AppBar, BottomNavigation, BottomNavigationAction, Container, makeStyles, Toolbar, Typography } from '@material-ui/core';\r\nimport { Compare, Star } from '@material-ui/icons';\r\nimport React from 'react';\r\nimport logo from '../logo.svg';\r\nimport ComparePage from './ComparePage';\r\nimport DiscoveryPage from './DiscoveryPage';\r\n\r\nconst _styles = {\r\n    stickToTop: {\r\n        width: '100%',\r\n        position: 'fixed',\r\n        top: 0,\r\n    },\r\n    padTopBottom: {\r\n        paddingTop: '70px',\r\n        paddingBottom: '70px',\r\n    },\r\n    stickToBottom: {\r\n        width: '100%',\r\n        position: 'fixed',\r\n        bottom: 0,\r\n    },\r\n    logoFlushRight: {\r\n        position: 'fixed',\r\n        right: '20px',\r\n        height: '1vmin',\r\n    },\r\n}\r\nclass MainPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            navValue: 0,\r\n        }\r\n    }\r\n\r\n    setValue(newValue) {\r\n        this.setState({navValue: newValue});\r\n    }\r\n    render() {\r\n        let navValue = this.state.navValue;\r\n        \r\n        //set current page based on nav bar value\r\n        //0: discovery\r\n        //1: compare\r\n        let pages = [\r\n            <DiscoveryPage />,\r\n            <ComparePage />,\r\n        ]\r\n        return (\r\n            <React.Fragment>\r\n                <AppBar style={_styles.stickToTop}>\r\n                    <Toolbar>\r\n                        <Typography variant='h4'>\r\n                            Movie Browser\r\n                        </Typography>\r\n                        <img src={logo} style={_styles.logoFlushRight} alt='copyright-logo' />\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                <Container style={_styles.padTopBottom}>\r\n                    {pages[navValue]}\r\n                </Container>\r\n                \r\n                <BottomNavigation \r\n                    showLabels\r\n                    style={_styles.stickToBottom}\r\n                    value={navValue}\r\n                    onChange={(event, newValue) => {\r\n                        this.setValue(newValue);\r\n                    }}\r\n                >\r\n                    <BottomNavigationAction icon={<Star />} label='Discover' />\r\n                    <BottomNavigationAction icon={<Compare />} label='Compare' />\r\n                </BottomNavigation>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainPage;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport MainPage from './pages/MainPage';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainPage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}